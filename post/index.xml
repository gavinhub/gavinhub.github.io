<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Mingyang</title>
    <link>http://gavinhub.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Mingyang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Dec 2016 17:55:35 +0800</lastBuildDate>
    <atom:link href="http://gavinhub.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Automate Jobs on a Mac</title>
      <link>http://gavinhub.github.io/post/automateOnMac/</link>
      <pubDate>Sat, 31 Dec 2016 17:55:35 +0800</pubDate>
      
      <guid>http://gavinhub.github.io/post/automateOnMac/</guid>
      <description>&lt;p&gt;While completing the data science project, I found I need to automate some job to help me crawl data from some API which should be invocated in a period style. So I investigated automation on a Mac.&lt;/p&gt;

&lt;p&gt;The tool we need for this is the &lt;code&gt;launchctl&lt;/code&gt; command. And the files we will be playing with is the &lt;code&gt;plist&lt;/code&gt; files under &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt;, which belongs to only the user but not the system (so it&amp;rsquo;s run by the user). Each file under this folder is a describing doc for a job. We can specify the BASH script it runs and when to run.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an XML file, so everything should be in the tags. When you forget what to write in a XML file, you can simply copy and paste another file in the same folder, and this is how I did it. Within the top level dict tag, the fileds are ordered by pairs of key/value. Let&amp;rsquo;s just focus on the fileds we care:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Label: this is the filename of the current file. It&amp;rsquo;s suggested to be named in com.SOMEPACKAGE.plist&lt;/li&gt;
&lt;li&gt;ProgramArguments: that&amp;rsquo;s the command been invocated when job is up&lt;/li&gt;
&lt;li&gt;StartCalendarInterval: the time when the command is run&lt;/li&gt;
&lt;li&gt;StandardOutPath/StandardErrorPath: the two files to accept error and std out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The simplies plist should have these five fields. Take care that the program arguments is an array, the each parameter exists in a single tag named &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;launchctl load somejob.plist    # load the job
launchctl list                  # list all jobs
launchctl stop somejob.plist    # stop the job
launchctl drop somejob.plist    # remove the job
launchctl start somejob.plist   # test run the job once
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things to remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the command should be runnable, e.g. a script needs to have execute premission.&lt;/li&gt;
&lt;li&gt;load before start&lt;/li&gt;
&lt;li&gt;jobs under this folder will be load by the system everytime system is started. So remember to remove the file if you don&amp;rsquo;t need it anymore.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Pin Point Tool</title>
      <link>http://gavinhub.github.io/post/a_pin_point_tool/</link>
      <pubDate>Sat, 19 Nov 2016 21:42:08 -0800</pubDate>
      
      <guid>http://gavinhub.github.io/post/a_pin_point_tool/</guid>
      <description>&lt;p&gt;I always wanted a tool that I can use to create points coordinates by simply clicking on a canvas. Today I made it in a web form.&lt;/p&gt;

&lt;p&gt;The page should be available &lt;a href=&#34;http://gavinhub.github.io/projects/pinprint/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s is ugly but simple to use. Hope this is helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Hugo </title>
      <link>http://gavinhub.github.io/post/helloHugo/</link>
      <pubDate>Wed, 16 Nov 2016 16:38:18 -0800</pubDate>
      
      <guid>http://gavinhub.github.io/post/helloHugo/</guid>
      <description>

&lt;p&gt;This is really a good blog tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# I can even show my code in this
def foo(p1):
    return p1 * 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love to write markdown pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are elegent.&lt;/li&gt;
&lt;li&gt;They are easy.&lt;/li&gt;
&lt;li&gt;And They are powful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, what I wrote above is just a testing. Let me note down how to use this tool first, in case I foget&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;p&gt;In my word, hugo is a tool used to create a static blog easily and fast. When the blog is set up, we can create and edit posts by just editting the files on our machine. And after building the pages, we will get a static site appears in the &lt;code&gt;public&lt;/code&gt; folder. By publishing this folder, you have your blog online!&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello world&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Hugo&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew update; brew install hugo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create site&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new site &amp;lt;SITENAME&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create new post&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new post/&amp;lt;Filename.md&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download theme and configure it&lt;/p&gt;

&lt;p&gt;Just go to &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;http://themes.gohugo.io/&lt;/a&gt; and find a nice looking theme and clone the repo to the theme folder. And edit the &lt;em&gt;config.toml&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run Server&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;disqus-integration&#34;&gt;Disqus Integration&lt;/h2&gt;

&lt;p&gt;So what we need is a disqusShortname which is a handler that you can create in the disqus website, and copy/paste it to &lt;em&gt;config.toml&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;publish-to-github-io-page&#34;&gt;Publish to github.io Page&lt;/h2&gt;

&lt;p&gt;After running command &lt;em&gt;hugo&lt;/em&gt;, the whole site will be generated in the public folder. Commit it in git, and you are good to go.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>